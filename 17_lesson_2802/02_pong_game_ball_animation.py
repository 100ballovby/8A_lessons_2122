import pygame as pg
from pygame.draw import rect, ellipse, aaline
from random import randint


def show_message(txt, color, x, y, size):
    """
    –§—É–Ω–∫—Ü–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∏–≥—Ä–µ.
    :param txt: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :param color: –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    :param x: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    :param y: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    :param size: —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    :return: None
    """
    pg.font.init()
    font = pg.font.SysFont('comicsans', size)
    msg = font.render(txt, True, color)
    screen.blit(msg, [x, y])


def ball_moving(obj, s_width, s_height, plr, enm):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —à–∞—Ä–∏–∫–∞ –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
    :param obj: –∏–≥—Ä–æ–≤–æ–π –æ–±—ä–µ–∫—Ç-–º—è—á
    :param s_width: —à–∏—Ä–∏–Ω–∞ —ç–∫—Ä–∞–Ω–∞
    :param s_height: –≤—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞
    :param plr: —Ä–∞–∫–µ—Ç–∫–∞-–∏–≥—Ä–æ–∫
    :param enm: —Ä–∞–∫–µ—Ç–∫–∞-–æ–ø–ø–æ–Ω–µ–Ω—Ç
    :return: None
    """
    global ball_speed_x, ball_speed_y
    obj.x += ball_speed_x
    obj.y += ball_speed_y

    if obj.top <= 0 or obj.bottom >= s_height:
        ball_speed_y *= -1
    if obj.left <= 0 or obj.right >= s_width:
        ball_speed_x *= -1

    if obj.colliderect(plr) or obj.colliderect(enm):
        ball_speed_x *= -1


def opponent_ai(obj, s_height, enm, speed):
    """
    –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã-–æ–ø–ø–æ–Ω–µ–Ω—Ç–∞.
    –ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ —à–∞—Ä–∏–∫–∞, –Ω—É–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–Ω–∏–∑,
    –µ—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–∏–∂–µ —à–∞—Ä–∏–∫–∞ - –≤–≤–µ—Ä—Ö.
    :param obj: –∏–≥—Ä–æ–≤–æ–π –æ–±—ä–µ–∫—Ç-–º—è—á
    :param s_height: –≤—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞
    :param enm: –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞-–æ–ø–ø–æ–Ω–µ–Ω—Ç
    :param speed: —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    :return: None
    """
    if enm.top < obj.y:  # –µ—Å–ª–∏ –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤—ã—à–µ –£ —à–∞—Ä–∏–∫–∞
        enm.y += speed  # –æ–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤–≤–µ—Ä—Ö
    if enm.bottom > obj.y:  # –µ—Å–ª–∏ –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∏–∂–µ –£ —à–∞—Ä–∏–∫–∞
        enm.y -= speed  # –ø–æ–¥–Ω—è—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É

    if enm.top <= 0:  # –µ—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑–∞—à–ª–∞ –∑–∞ –≤–µ—Ä—Ö–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —ç–∫—Ä–∞–Ω–∞
        enm.top = 0  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–µ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ
    elif enm.bottom >= s_height:  # –µ—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —É—à–ª–∞ –∑–∞ –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É —ç–∫—Ä–∞–Ω–∞
        enm.bottom = s_height  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–µ –Ω–∞ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü–µ


def platform_animation(plr, speed, height):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã-–∏–≥—Ä–æ–∫–∞
    :param plr: –û–±—ä–µ–∫—Ç-–∏–≥—Ä–æ–∫
    :param speed: –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è
    :param height: –í—ã—Å–æ—Ç–∞ —ç–∫—Ä–∞–Ω–∞
    :return: None
    """
    plr.y += speed

    if plr.bottom >= height:
        plr.bottom = height
    elif plr.top <= 0:
        plr.top = 0


W = 1280
H = 960
screen = pg.display.set_mode((W, H))
pg.display.set_caption('Pong game v1üèì')
clock = pg.time.Clock()

# Colors
l_gray = (200, 200, 200)
bg_color = (107, 107, 107)

# Game objects
ball = pg.Rect(W // 2 - 15, H // 2 - 15, 30, 30)
platform = pg.Rect(W - 20, H // 2, 10, 150)
opponent = pg.Rect(10, H // 2, 10, 150)

# Game variables
ball_speed_x = 8
ball_speed_y = 8
opponent_speed = 8
p_speed = 0

finished = False
while not finished:
    clock.tick(30)
    for event in pg.event.get():
        if event.type == pg.QUIT:
            finished = True
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_UP:
                p_speed -= 8
            if event.key == pg.K_DOWN:
                p_speed += 8
        if event.type == pg.KEYUP:
            if event.key == pg.K_UP:
                p_speed += 8
            if event.key == pg.K_DOWN:
                p_speed -= 8

    # Visuals
    screen.fill(bg_color)
    rect(screen, l_gray, platform)
    rect(screen, l_gray, opponent)
    ellipse(screen, l_gray, ball)
    aaline(screen, l_gray, [W // 2, 0], [W // 2, H])

    # Game logic
    ball_moving(ball, W, H, platform, opponent)
    opponent_ai(ball, H, opponent, opponent_speed)
    platform_animation(platform, p_speed, H)

    pg.display.update()